"""
Reaction classes.

This module contains reaction types that define how species interact:
- Reaction: Abstract base class for all reaction types
- MassActionReaction: Standard mass-action kinetics  
- LogisticGrowthReaction: Logistic growth dynamics
"""

from abc import ABC, abstractmethod
import sympy as sp
from typing import Dict
from .models import Species, Parameter


class Reaction(ABC):
    """
    An abstract base class for all reaction types.
    It defines the "contract" that all concrete reaction classes must follow.
    """
    
    def __init__(self, name: str, reactants: Dict[Species, int], products: Dict[Species, int], rate: Parameter):
        """
        Initialize a reaction.
        
        Args:
            name (str): Name of the reaction
            reactants (Dict[Species, int]): Mapping of reactant species to their stoichiometry
            products (Dict[Species, int]): Mapping of product species to their stoichiometry  
            rate (Parameter): Rate parameter for the reaction
        """
        self.name = name
        self.reactants = reactants
        self.products = products
        self.rate = rate
        # The rate law is now generated by the concrete subclass
        self.rate_law = self._generate_rate_law()

    @abstractmethod
    def _generate_rate_law(self) -> sp.Expr:
        """
        Create the symbolic rate law expression.
        
        This method MUST be implemented by all subclasses.
        
        Returns:
            sp.Expr: Symbolic expression for the reaction rate law
        """
        raise NotImplementedError("Subclasses must implement this method to define their kinetics.")

    def __repr__(self) -> str:
        reactants_str = ' + '.join([f"{s.name}" if v == 1 else f"{v}{s.name}" for s, v in self.reactants.items()]) or "0"
        products_str = ' + '.join([f"{s.name}" if v == 1 else f"{v}{s.name}" for s, v in self.products.items()]) or "0"
        return f"Reaction: {self.name} [{reactants_str} -> {products_str}]"


class MassActionReaction(Reaction):
    """
    A concrete reaction class for standard mass-action kinetics.
    
    For a reaction nA + nB + ... -> nC + nD + ..., the rate law is:
    rate = k * [A]^nA * [B]^nB * ...
    """
    
    def _generate_rate_law(self) -> sp.Expr:
        """
        Implement the rate law for mass-action kinetics.
        
        Returns:
            sp.Expr: Rate law expression (k * product of reactant concentrations^stoichiometry)
        """
        law = self.rate.get_symbol()
        for species, stoich in self.reactants.items():
            law *= species.symbol**stoich
        return law


class LogisticGrowthReaction(Reaction):
    """
    A specialized reaction class for logistic growth.
    
    The rate law is r*x*(1 - x/K) where:
    - r is the intrinsic growth rate
    - K is the carrying capacity
    - x is the species concentration/population
    """
    
    def __init__(self, name: str, species: Species, r: Parameter, K: Parameter):
        """
        Initialize a logistic growth reaction.
        
        Args:
            name (str): Name of the reaction
            species (Species): The growing species
            r (Parameter): Intrinsic growth rate parameter
            K (Parameter): Carrying capacity parameter
        """
        self.species = species
        self.r = r
        self.K = K
        # Call the parent's __init__ with the conceptual reaction x -> 2x
        super().__init__(name=name, reactants={species: 1}, products={species: 2}, rate=r)

    def _generate_rate_law(self) -> sp.Expr:
        """
        Override the base method to create the logistic growth rate law.
        
        Returns:
            sp.Expr: Logistic growth rate law expression r*x*(1 - x/K)
        """
        x = self.species.symbol
        r_sym = self.r.get_symbol()
        K_sym = self.K.get_symbol()
        return r_sym * x * (1 - x / K_sym)
